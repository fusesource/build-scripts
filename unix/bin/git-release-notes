#!/usr/bin/ruby
#= Overview
# git-release-notes generates release notes in Confluence wiki markup, aggregating information found in:
# - the commits in the git log between the two tags or revisions specified
# - the Apache and FuseSource JIRA instances
#
#= Usage
#
#  Usage:  git release-notes  <tag> --since <tag or revision>
#
#  The release-notes.cfg file in this directory should contain the name for the current project
#  e.g. project: Karaf
#
#= Example
#
#  Example: git release-notes karaf-2.0.0-fuse-01-00 --since karaf-2.0.0

require 'logger'
require 'net/http'
require 'rdoc/usage'
require 'rubygems'
require 'jira4r'
require 'rexml/document'
require 'rss/0.9'
require 'tempfile'
require 'uri'
require 'yaml'

include REXML

ISSUE_NUMBER=/[A-Z][A-Z0-9]{1,10}-[0-9]{1,4}/
FUSE_VERSION=/[0-9]{1,4}\.[0-9]{1,2}\.[0-9]{1}-fuse-[0-9]{2}-[0-9]{2}/

LOG = Logger.new(STDOUT)
LOG.level = Logger::WARN

class Git
  
  def tags
    `git tag`.map { |tag| tag.chomp }
  end
  
  def log(from, to)
    `git log #{from}..#{to}`
  end
  
  def self.readLog(from, to) 
    temp_file = Tempfile.new('release_notes')
    system("git log --pretty='%B%n--------------------------------' #{from}..#{to} > #{temp_file.path}")
    
    commit = Array.new
    IO.foreach(temp_file.path) { |line|
      if (line =~ /^-+$/) then
        yield commit unless commit.empty?
        commit = Array.new
      else
        commit << line
      end
    }
    
    yield commit unless commit.empty?
  end

end

class Svnmerge

  def self.isBlocked?(commit)
    commit.select{ |line| line =~ /Blocked revisions /}.length > 0
  end

end

class Issue

  attr_accessor :issue, :category, :description, :links, :url
  def initialize(url)
    @url = url
    @issue = id(url)
    @links = [url]
  end

  def to_wiki  
    links = @links.map { |url| "[#{id(url)}|#{url}]" }.join("/")
    "#{links} - #{@description}"
  end

  def id(url)
    url.scan(ISSUE_NUMBER)[0]
  end

  def <=>(other)
    return (@issue <=> other.issue)
  end
  
  def eql?(other)
    return (@issue == other.issue)
  end
  
  def hash
    @issue.hash
  end
  
  def to_s
    "[#{@issue}] #{@description}"
  end

end

class FuseJira

  def initialize
  end

  def project(key)
    selected_project = @jira.getProjectByKey(key)
    abort("Project #{key} not found in FUSE JIRA") unless selected_project
    selected_project
  end

  def version(project, name)
    selected_versions = @jira.getVersions(project).select{ |version| version.name.strip == name }
    abort("Version #{name} not found in FUSE JIRA") if selected_versions.empty?
    selected_versions.first
  end

end

class ReleaseNotes

  def initialize(project, start)
    @jira = FuseJira.new
    @git = Git.new
    @project = project

    @tag = start
    @version = start[FUSE_VERSION]
   
    @fuseIssues = Hash.new 
    @issues = Hash.new
  end
  
  def jira(id) 
    if (id =~ /^ESB/ or id =~ /^FON/ or id=~ /^MR/ or id=~ /^SF/ or id=~ /^MB/) then
      ["http://fusesource.com/issues"]
    else
      ["https://issues.apache.org/jira"]
    end
  end
  
  def jiraRssUrl(id)
    jira(id).map { |jira| "#{jira}/si/jira.issueviews:issue-xml/#{id}/#{id}.xml" }
  end
  
  def jiraHtmlUrl(id)
    jira(id).map { |jira| "#{jira}/browse/#{id}" }
  end

  def findMatchingFuseIssue(id)
    results = jiraHtmlUrl(id).each { |url|
        readRssFeed("http://fusesource.com/issues/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?customfield_10003=#{url}&sorter/field=issuekey&sorter/order=DESC&tempMax=1000") { |issue,item|
           puts "     matches #{issue}"
           return issue if issue
        }
    }   
    false
  end
 
  def fuseRssUrl
    puts "==> Fetching project and version id from FUSE JIRA"

    project = @jira.project(@project).id
    version = @jira.version(@project, @version).id

    puts("...Project FUSE #{@project} -> #{project}")
    puts("...Version #{@version} -> #{version}")

    "http://fusesource.com/issues/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?pid=#{project}&resolution=1&resolution=6&fixfor=#{version}&sorter/field=issuekey&sorter/order=DESC&tempMax=1000"
  end

  def addFuseIssues()
    url = fuseRssUrl()
    puts "==> Scanning the FUSE JIRA"
    readRssFeed(url) do |issue, item|
      link = XPath.first(item, "customfields/customfield[@id='customfield_10003']/customfieldvalues/
customfieldvalue/text()").to_s
      issue.links << link if !link.empty?
      puts "...#{issue}"
      @fuseIssues[issue]=link.scan(ISSUE_NUMBER)[0]
    end
    puts "...found #{@fuseIssues.size} issues in the FUSE JIRA"
  end

  def addFromGitLog(previous)
    puts "==> Reading git log from #{previous} to #{@tag}"

    log = @git.log(previous, @tag)
    
    @date = Date.parse(log.select {|line| line =~ /^Date:/}.first[6..-1])
   
    Git.readLog(previous, @tag) { |commit|
      next if Svnmerge.isBlocked?(commit)
      commit.each { |line|
        line.scan(ISSUE_NUMBER).uniq.each { |id|
          readRssFeed(jiraRssUrl(id)) { |issue,item|
            puts "...#{issue}"
            next if not issue
            fuse = findMatchingFuseIssue(id)
            if (fuse) then
              fuse.links << issue.url
              @issues[fuse] = id 
            else
              @issues[issue] = id if issue
            end
          }
        }
      }
    }
  end

  def to_wiki(filename)
    puts "==> Generating release notes"
    issues = (@issues.keys + @fuseIssues.keys).sort
    categories = issues.map { |issue| issue.category }.uniq.sort
    File.open(filename, 'w') { |file|
      file.puts "h2. What's new in FUSE #{@project} #{@version}, #{@date.strftime('%B %d, %Y')}" 
      categories.each { |category|
        file.puts "h3. #{category}"
        issues.select { |issue| issue.category == category }.each { |issue|
          file.puts "* #{issue.to_wiki}"
        }
        file.puts
      }
    }
    puts "...release notes written to #{filename}"
  end

  def readRssFeed(url)
    client = HTTPClient.new
    begin
      doc = Document.new(client.get_content(url))

      XPath.each(doc, "//item") do |item|
        issue = Issue.new(XPath.first(item, "link/text()").to_s)
        issue.category = XPath.first(item, "type/text()").to_s
        issue.description = XPath.first(item, "title/text()").to_s.gsub(/\[\(?[A-Z0-9]{2,7}-[0-9]{1,4}\)?\]/, "").strip
        yield issue, item
      end
    rescue Exception => e
      puts "Error getting #{url}: #{e.message}"
      yield nil, nil
    end
  end


end

RDoc::usage unless ARGV.length == 3 and ARGV[1] == "--since"

project = if (File.exist?("release-notes.cfg")) then
  YAML::load(File.open('release-notes.cfg'))['project']
else
  "Project"
end

relnotes = ReleaseNotes.new(project, ARGV[0])
relnotes.addFromGitLog(ARGV[2])

relnotes.to_wiki("release-notes.wiki")
